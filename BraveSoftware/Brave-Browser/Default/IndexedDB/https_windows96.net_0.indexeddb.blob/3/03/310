//!wrt $BSPEC:{"icn":"apps/registry","cpr":"Copyright (C) Windows 96 Team 2023.","dsc":"System Configuration Manager CLI","frn":"SCM CLI","ver":1,"ssy":"cli"}

const{sysConf:SCM}=w96,{argParser:argParser}=w96.util;let term=this.boxedEnv.term;function die(e,t=1){return term.println(`[31m${e}[0m`),t}let commandRegistry=[{name:"dump",exec:cmd_Dump,usage:" <path> [-o <output_file>] - Dump SCM object."},{name:"import",exec:cmd_Import,usage:" <path> - Import dumped file."},{name:"ls",exec:cmd_LS,usage:" [path] [-s <sort_mode R/K/V (def: RKV)>] [-t <type filter>] - Lists the contents of the specified path."},{name:"shell",exec:cmd_Shell,usage:" - Launch interactive shell."},{name:"status",exec:cmd_Status,usage:" - View current system configuration status."}];async function cmd_Shell(e,t){let n=!0;for(;n;){let e=await term.prompt("scmc> ");const t=argParser.parse(e);switch(t[0]){case"help":term.println("scmc Commands:"),term.println(`    ${commandRegistry.map((e=>`${e.name}${e.usage}`)).join("\n    ")}\n`),term.println("Shell Commands:"),term.println("    clear - Clear the screen.\n    exit - Exits the shell.\n    help - This page.\n");continue;case"clear":term.clear();continue;case"exit":n=!1}if(!n)break;const r=commandRegistry.find((e=>e.name==t[0]));r?await r.exec(this,t):term.println("Error: command not found.")}}async function cmd_Import(e,t){if(t.shift(),!t[0])return die("Error: no path specified.");const n=FSUtil.resolvePath(current.cwd,t[0]);if(!await FS.exists(n))return die("Error: file does not exist.");const r=JSON.parse(await FS.readstr(n));if(!r.scmRestoreInfo||!r.scmRestoreInfo.path)return die("Error: not a valid SCM dump.");term.println("Restoring..."),await SCM.setAndSync(r.scmRestoreInfo.path,r.dumpData),term.println("Restoration complete!")}async function cmd_LS(e,t){t.shift();let n="RKV",r=null;if(t.length>1&&t.includes("-s")){const e=t[t.indexOf("-s")+1];e&&(n=e)}if(t.length>1&&t.includes("-t")){const e=t[t.indexOf("-t")+1];e&&(r=e.toLowerCase())}const i=t[0]||"",s=SCM.ls(i).filter((e=>!r||(typeof SCM.get(`${i}/${e.name}`)).toLowerCase()==r)),a=s.filter((e=>"key"==e.type)),o=s.filter((e=>"root"==e.type)),m=s.filter((e=>"value"==e.type));if(term.println(`Listing for [33m${""==i?"<root>":i}[0m\n`),0==s.length)return term.println("<empty>"),0;for(let e of n.split(""))switch(e){case"R":for(let e of o)term.println(`<[31mROOT[0m>   ${e.name}`);break;case"K":for(let e of a)term.println(`<[33mKEY[0m>    ${e.name}`);break;case"V":for(let e of m)term.println(`<[35mVALUE[0m>  ${e.name}`)}return 0}async function cmd_Dump(e,t){if(t.shift(),!t[0])return die("Error: no path specified.");const n=SCM.get(t[0]);if(!n)return die("No object found for the specified path.");try{if(t.includes("-o")){const e=t[t.indexOf("-o")+1];if(!e)return die("No file specified to dump to!");const r=FSUtil.resolvePath(current.cwd,e);return await FS.writestr(r,JSON.stringify({scmRestoreInfo:{date:(new Date).toUTCString(),path:t[0]},dumpData:n},null)),0}term.println(JSON.stringify(n,null,4))}catch(e){return die(new String(e))}}async function cmd_Status(e,t){term.println(`SCM Status\n----------\n\nRoots: [${SCM.ls("").map((e=>e.name)).join(", ")}]\nIndexes:\n    ${SCM.ls("").map((e=>SCM.getIndex(e.name).id+" --\x3e "+e.name)).join("\n    ")}`)}class SCMCApp extends WApplication{constructor(){super()}async main(e){var t;if(await super.main(e),!term)return;if(e.shift(),null==e[0]||e.includes("--help"))return term.writeln(`[36mSystem Configuration Manager (SCM) Command-Line Interface.\nCopyright (C) SYS36.NET 2023.[0m\n\nUsage: scmc <command> [arguments]\n\nCommands:\n    ${commandRegistry.map((e=>`${e.name}${e.usage}`)).join("\n    ")}\n`),0;const n=commandRegistry.find((t=>t.name==e[0]));return n?null!==(t=await n.exec(this,e))&&void 0!==t?t:0:(term.println("Error: command not found."),1)}}

return await WApplication.execAsync(new SCMCApp(), this.boxedEnv.args, this);