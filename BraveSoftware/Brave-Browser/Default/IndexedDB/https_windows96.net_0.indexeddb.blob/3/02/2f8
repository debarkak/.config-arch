//!wrt $BSPEC:{"icn":null,"cpr":"Copyright (C) Windows 96 Team 2023.","dsc":"JavaScript Shell","frn":"JSH","ver":1,"ssy":"cli"}

const{inspect:inspect}=w96.util,term=this.boxedEnv.term;if(!term)return 1;const REPL_CMD_PREFIX=".",JSH_PROFILE_DEFAULT="// These commands will be executed on each JSH startup.\n\n/**\n * Called on JSH initialization.\n */\nasync function init(context) {\n    // Supply custom code here\n}\n\nmodule.exports = { init }";class JSShellApplication extends WApplication{constructor(){super()}async main(argv){super.main(argv);const JshConfig={prompt:"> "};await FS.exists("C:/user/appdata/JSH/profile.js")||(await FS.exists("C:/user/appdata/JSH")||await FS.mkdir("C:/user/appdata/JSH"),await FS.writestr("C:/user/appdata/JSH/profile.js",JSH_PROFILE_DEFAULT));try{const t=await include("C:/user/appdata/JSH/profile.js");if(t.init){const r=await t.init({config:JshConfig,term:term,app:this});if(255==r)return}}catch(t){term.print("Cannot load profile due to the following error:"),term.print(inspect(t))}term.writeln(term.color`{hex('#d75fff') JS Shell v1.0}`);let ctrlCcount=0,depth=1;for(;;)try{let str=await term.prompt(JshConfig.prompt,!0);if(str){const args=str.split(" ");if(args[0].startsWith(REPL_CMD_PREFIX)){const t=REPL_COMMANDS.find((t=>t.name==args[0].substring(REPL_CMD_PREFIX.length)));if(t){const r=await t.exec(args,str,term);if(255==r)break;continue}}ctrlCcount=0;let e=eval(str);e instanceof Promise&&(e=await e),e=inspect(e,{depth:depth,colors:!0}),term.writeln(e)}else if(ctrlCcount+=1,1===ctrlCcount&&term.writeln("\nPress Ctrl+C again to quit."),2===ctrlCcount)break}catch(t){term.writeln(term.color.red(t.toString()))}}}const alphaSort=(t,r)=>t>r?1:t<r?-1:0,REPL_COMMANDS=[{name:"clear",description:"Clears the screen",exec:(t,r,n)=>n.clear()},{name:"exit",description:"Quits this REPL shell.",exec:(t,r,n)=>255},{name:"load",args:"<path>",description:"Loads the specified file into the current shell.",exec:async(args,cmdLine,term)=>{const fileName=cmdLine.substring(REPL_CMD_PREFIX.length+args[0].length),resolvedPath=FSUtil.resolvePath(current.cwd,fileName);term.println(term.color`{hex('#afffaf') Loading file "${resolvedPath}"}`);const fileContents=await FS.readstr(resolvedPath);let e=eval(fileContents);e instanceof Promise&&(e=await e),e=inspect(e,{depth:1,colors:!0}),term.writeln(e)}},{name:"help",description:"Shows this help message",exec:(t,r,n)=>{n.println(n.color`{hex('#87d700') JS Shell (jsh) Commands List}`);for(let t of REPL_COMMANDS.sort(alphaSort))n.println(n.color`  {hex('#af5fff') ${REPL_CMD_PREFIX}${t.name}}${null==t.args?"":n.color` {hex('#ffff00') ${t.args}}`}: ${t.description}`);n.println("")}}];

return await WApplication.execAsync(new JSShellApplication(), this.boxedEnv.args, this);